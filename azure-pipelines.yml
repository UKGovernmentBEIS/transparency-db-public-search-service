# Maven

# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
  - master

variables:

  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: '8e9969b3-7574-441c-a10f-7114dc3314f7'

  # Web app name
  webAppName: 'dev-transparency-db-public-search-service'

  # Agent VM image name
  vmImageName: 'ubuntu-20.04'

stages:
  - stage: Build
    displayName: Build stage
    jobs:
      - job: MavenPackageAndPublishArtifacts
        displayName: Maven Package and Publish Artifacts
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: Maven@3
            displayName: 'Maven Package'
            inputs:
              mavenPomFile: 'pom.xml'
              mavenOptions: '-Xmx3072m'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.8'
              jdkArchitectureOption: 'x64'
              publishJUnitResults: true
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              mavenVersionOption: 'Default'
              mavenAuthenticateFeed: false
              effectivePomSkip: false
              sonarQubeRunAnalysis: false
              goals: 'package spring-boot:repackage'
          - task: CopyFiles@2
            displayName: 'Copy Filess to artifact staging directory'
            inputs:
              SourceFolder: '$(System.DefaultWorkingDirectory)'
              Contents: '**/target/*.?(war|jar)'
              TargetFolder: $(Build.ArtifactStagingDirectory)

          - task: PublishPipelineArtifact@0
            displayName: 'Publish pipeline artifacts'
            inputs:
              targetPath: $(Build.ArtifactStagingDirectory)

  - stage: Deploy
    displayName: Deploy stage
    dependsOn: Build
    condition: succeeded()
    jobs:
      - deployment: DeployLinuxWebApp
        displayName: Deploy Linux Web App
        environment: 'development'
        pool:
          vmImage: $(vmImageName)
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadPipelineArtifact@1
                  displayName: 'Download Pipeline Artifact'
                  inputs:
                    buildType: 'current'
